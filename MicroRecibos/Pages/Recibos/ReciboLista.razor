@page "/"

@inject IReciboApiClient reciboApiClient
@inject IPagoApiClient pagoApiClient
@inject NavigationManager navigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService


<h3>Lista de Recibos</h3>

@Mensaje

@if (_isVisible)
{
    <div>
        <ReciboDetail OPago="pagoNuevo" />
    </div>
}

<table class="table">
    <tbody>
        <tr>
            <td colspan="2">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Crear Recibo" Icon="save"
                              Click="@CrearReciboCola" />
            </td>
        </tr>
    </tbody>
</table>

@if (oRecibos == null)
{
    <p>
        <em>Cargando datos...</em>
    </p>
}
else
{
    <RadzenGrid TItem="Recibo" Data="oRecibos" AllowPaging="true" AllowFiltering="true"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSize="7" AllowSorting="true"
            ColumnWidth="150px">
        <Columns>
            <RadzenGridColumn TItem="Recibo" Property="Id" Title="ID. RECIBO" />
            <RadzenGridColumn TItem="Recibo" Property="NombrePasajero" Title="PASAJERO" />
            <RadzenGridColumn TItem="Recibo" Property="CodigoReserva" Title="COD. RESERVA" />
            <RadzenGridColumn TItem="Recibo" Property="Concepto" Title="CONCEPTO" Width="120px" />
            <RadzenGridColumn TItem="Recibo" Property="ACuenta" Title="PAGADO"
                          TextAlign="TextAlign.Right" Width="60px" />
            <RadzenGridColumn TItem="Recibo" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="data">
                    <RadzenLink Path=@($"/recibodetail/{data.Id}")
                            Icon="print" Size="ButtonSize.Medium" @onclick:stopPropagation="true" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Recibo" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="50px">
                <Template Context="data">
                    <RadzenButton Text="Elimina" Icon="delete" Size="ButtonSize.Small"
                              Click="@((args) => EliminarReciboButtonClick(data.Id))"
                              @onclick:stopPropagation="true" />
                </Template>
            </RadzenGridColumn>

        </Columns>
    </RadzenGrid>

}


@code {
    List<Recibo> oRecibos;
    public string Mensaje { get; set; }
    private bool _isVisible = false;
    Pago pagoNuevo;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            oRecibos = await reciboApiClient.GetAllRecibos();
        }
        catch (Exception e)
        {
            Mensaje = "Error... " + e.Message;
        }
    }


    public async Task CrearReciboCola()
    {
        pagoNuevo = await pagoApiClient.GetPagos();
        if (pagoNuevo == null)
        {
            ShowNotification(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "NO existen Pagos!",
                    Detail = "No existen Pagos Parciales pendientes...",
                    Duration = 4000
                });
            return;
        }
        _isVisible = !_isVisible;
        //navigationManager.NavigateTo($"/recibodetail");
    }



    protected async System.Threading.Tasks.Task EliminarReciboButtonClick(Guid clientId)
    {        
        var confirmResult = await DialogService.Confirm("Está seguro@ de eliminar el Recibo?", "ELIMINAR");
        if (confirmResult.HasValue && confirmResult.Value)
        {
            try
            {
                await reciboApiClient.EliminarRecibo(clientId);
                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Recibo eliminado!",
                        Detail = "El recibo se eliminó exitosamente!",
                        Duration = 4000
                    });
            }
            catch (System.Exception exception)
            {
                NotificationService.Notify(NotificationSeverity.Error, $"Error",
                    $"Error al eliminar recibo", duration: -1);
            }
        }
    }


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
        Console.WriteLine($"{message.Severity} notification");
    }
}
